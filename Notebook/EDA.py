# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IuHlAHA92psDjm1_55lHKC8EuGjgIG7C

# Submission Pertama: Menyelesaikan Permasalahan Human Resources

- Nama: Hafiizh Taufiqul Hakim
- Email: 2012500720@student.budiluhur.ac.id
- Id Dicoding: hafizhtaufiqul1002

# Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
# %matplotlib inline
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

"""# Load Dataset"""

dataset = "https://raw.githubusercontent.com/HafiizhTH/Human_Resources/main/Data/Data_to_Visualisasi.csv"

df = pd.read_csv(dataset)
df.head().T

"""# EDA

### Statistik Deskriptif
"""

num = df.select_dtypes(exclude='object').columns
cat = df.select_dtypes(include='object').columns

# Statistik deskriptif untuk data numerik
df[num].describe()

# Statistik deskriptif untuk data kategorik
df[cat].describe()

"""### Univariate Analysis

##### Fitur Numerik
"""

# Mengidentifikasi untuk kolom numerik
num_plots = len(num)
num_rows = (num_plots // 3) + 1
num_cols = 3

# Kde
rcParams['figure.figsize'] = 18, 5 * num_rows
for i in range(0, len(num)):
    plt.subplot(num_rows, num_cols, i+1)
    sns.kdeplot(x=df[num[i]], palette='#4793AF')
    plt.title(num[i], fontsize=12, fontweight='bold')
    plt.tight_layout(pad=2)
plt.show()

# Boxplot
rcParams['figure.figsize'] = 18, 5 * num_rows
for i in range(0, len(num)):
    plt.subplot(num_rows, num_cols, i+1)
    sns.boxplot(x=df[num[i]], color='#4793AF')
    plt.title(num[i], fontsize=12, fontweight='bold')
    plt.tight_layout(pad=2)
plt.show()

"""##### Fitur Kategorik"""

# Mengidentifikasi untuk kolom kategorik
cat_plots = len(cat)
cat_rows = (cat_plots // 2) + 1
cat_cols = 2

def generate_palette(series):
    max_val = series.value_counts().idxmax()
    min_val = series.value_counts().idxmin()
    colors = ['#DD5746' if val == min_val else '#FFC470' if val == max_val else '#4793AF' for val in series.unique()]
    return dict(zip(series.unique(), colors))

rcParams['figure.figsize'] = 18, 5 * cat_rows
for i in range(0, len(cat)):
    plt.subplot(cat_rows, cat_cols, i+1)
    palette = generate_palette(df[cat[i]])
    sns.countplot(y=df[cat[i]], palette=palette)
    plt.title(cat[i], fontweight='bold')
    plt.tight_layout(pad=2)
plt.show()

"""### Bivariate Analysis"""

# Membuat sebuah helper function bernama categorical_plot
def categorical_plot(features, df, segment_feature=None):
    fig, ax = plt.subplots(len(features), 1,figsize=(16,20))
    for i, feature in enumerate(features):
        if segment_feature:
            sns.countplot(data=df, x=segment_feature, hue=feature, ax=ax[i])
            ax[i].set_title(f'Grafik {feature} berdasarkan {segment_feature}', fontsize = 14, fontweight='bold')
            ax[i].set_xlabel(segment_feature, fontsize = 10)
        else:
            sns.countplot(data=df, x=feature, ax=ax[i])
    plt.tight_layout()
    plt.show()

# Membuat sebuah helper function bernama numerical_plot
def numerical_plot(features, df, segment_feature=None):
    fig, ax = plt.subplots(len(features), 1,figsize=(16,20))
    for i, feature in enumerate(features):
        if segment_feature:
            sns.countplot(data=df, x=feature, hue=segment_feature, ax=ax[i])
            ax[i].set_title(f'Grafik {feature} berdasarkan {segment_feature}', fontsize = 14, fontweight='bold')
            ax[i].set_xlabel(segment_feature, fontsize = 10)
        else:
            sns.countplot(data=df, x=feature, ax=ax[i])
    plt.tight_layout()
    plt.show()

"""##### Hubungan Fitur Numerik dengan Fitur Attrition"""

numerical_plot(
    features=["Age", "DistanceFromHome", "YearsWithCurrManager", "TotalWorkingYears"],
    df=df,
    segment_feature="Attrition"
)

"""**Obervasi:**   
Teks

##### Hubungan Fitur Kategorik dengan Fitur JobRole
"""

categorical_plot(
    features=["Gender", "Education", "EducationField"],
    df=df,
    segment_feature="JobRole"
)

"""**Obervasi:**   
Teks
"""

categorical_plot(
    features=["EnvironmentSatisfaction", "JobInvolvement", "OverTime", "JobLevel",
              "PerformanceRating", "RelationshipSatisfaction", "WorkLifeBalance"],
    df=df,
    segment_feature="JobRole"
)

"""**Obervasi:**   
Teks

##### Hubungan Fitur kategorik dengan Fitur Department
"""

categorical_plot(
    features=["Gender", "Education", "EducationField"],
    df=df,
    segment_feature="Department"
)

"""**Obervasi:**   
Teks
"""

categorical_plot(
    features=["EnvironmentSatisfaction", "JobInvolvement", "OverTime",
              "PerformanceRating", "RelationshipSatisfaction", "WorkLifeBalance"],
    df=df,
    segment_feature="Department"
)

"""**Obervasi:**   
Teks

##### Hubungan Fitur Kategorik dengan Fitur Business Travel
"""

categorical_plot(
    features=["Department", "JobRole"],
    df=df,
    segment_feature="BusinessTravel"
)

"""**Obervasi:**   
Teks

### Multivariate Analysis

##### Hubungan dari setiap kolom
"""

corr = df[num].corr()
plt.figure(figsize=(20, 16))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap', fontsize=16, fontweight='bold')
plt.xticks(rotation=90, fontsize=16)
plt.yticks(rotation=0, fontsize=16)
plt.show()

"""**Obervasi:**   
Teks
"""